version: 2

custom-steps:
  - &install-clang
    run:
      name: install dev tools and dependencies
      command: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key |apt-key add -
        apt update
        apt install -y software-properties-common # for add-apt-repository, ubuntu-tooolchain-r-test is required by trusty
        apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic main"
        apt-add-repository "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-14 main"
        apt install -y binutils-arm-linux-gnueabihf lld-${LLVM_VER:-14} clang-tools-${LLVM_VER:-14} # clang-tools: clang-cl
  - &install-dev
    run:
      name: install dev packages
      command: |
        apt install -y libstdc++-7-dev p7zip-full nasm yasm libdrm-dev libxv-dev libva-dev libvdpau-dev libbz2-dev zlib1g-dev sshpass
  - &get-ffmpeg
    run:
      name: get ffmpeg source
      command: |
        FF_BRANCH=${FF_VERSION}
        [ "$FF_BRANCH" == "master" ] || FF_BRANCH="release/$FF_BRANCH"
        git clone -b $FF_BRANCH --depth 1 --no-tags https://git.ffmpeg.org/ffmpeg.git ffmpeg-${FF_VERSION}
  - &get-winsysroot
    run:
      name: Install windows sdk and vcrt
      command: |
        wget https://sourceforge.net/projects/avbuild/files/dep/msvcrt-dev.7z/download -O msvcrt-dev.7z
        7z x msvcrt-dev.7z -o/tmp &>/dev/null
        wget https://sourceforge.net/projects/avbuild/files/dep/winsdk.7z/download -O winsdk.7z
        7z x winsdk.7z -o/tmp &>/dev/null
        ${WindowsSdkDir}/lowercase.sh
        ${WindowsSdkDir}/mkvfs.sh
        export VCDIR=/tmp/msvcrt-dev
        export WindowsSDKVersion=$(cat /tmp/winsdk/.version)
        export WindowsSdkDir=/tmp/winsdk
        export PKG_CONFIG_PATH_MFX=/tmp/dep/ClangCL/lib/pkgconfig
        export AMF_DIR=/tmp/dep/include
  - &upload
    run:
      name: upload
      command: |
        $FORCE_LTO && LTO_SUFFIX=-lto
        mv sdk-* ffmpeg-${FF_VERSION}-${TARGET_OS}-${COMPILER}${LIB_OPT//*-/-}${CONFIG_SUFFIX}${LTO_SUFFIX}
        export XZ_OPT="--threads=`getconf _NPROCESSORS_ONLN` -9e" # -9e. -8/9 will disable mt?
        tar Jcf ffmpeg-${FF_VERSION}-${TARGET_OS}-${COMPILER}${LIB_OPT//*-/-}${CONFIG_SUFFIX}${LTO_SUFFIX}{.tar.xz,}
        ls -lh *.xz
        sshpass -p $SF_PW scp -o StrictHostKeyChecking=no ffmpeg-${FF_VERSION}-${TARGET_OS}*.tar.xz $SF_USER,zero16832@frs.sourceforge.net:/home/frs/project/ffbuild/${TARGET_OS}

jobs:
  build_gcc:
    docker:
      - image: buildpack-deps:bionic
    environment:
      COMPILER: gcc
      TARGET_OS: "linux"
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - run:
          name: Install GCC
          command: |
            apt update
            apt install -y  gcc
      - *install-dev
      - *get-ffmpeg
      - run:
          name: Configure and Build
          command: |
            if [ -n "${CONFIG_SUFFIX}" ]; then
              ln -sf config{${CONFIG_SUFFIX},}.sh;
            fi
            wget https://sourceforge.net/projects/avbuild/files/dep/dep.7z/download -O dep.7z
            7z x -y dep.7z -otools &>/dev/null
            export PKG_CONFIG_PATH_MFX=$PWD/tools/dep/linux64-gcc/lib/pkgconfig
            export FFSRC=$PWD/ffmpeg-${FF_VERSION}
            export USER_OPT="--enable-wolfssl"
            ./avbuild.sh
      - *upload
  build_clang:
    docker:
      - image: buildpack-deps:bionic
    environment:
      COMPILER: clang
      TARGET_OS: "linux"
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - *install-clang
      - *install-dev
      - *get-ffmpeg
      - run:
          name: Configure and Build
          command: |
            if [ -n "${CONFIG_SUFFIX}" ]; then
              ln -sf config{${CONFIG_SUFFIX},}.sh;
            fi
            wget https://sourceforge.net/projects/avbuild/files/dep/dep.7z/download -O dep.7z
            7z x -y dep.7z -otools &>/dev/null
            export PKG_CONFIG_PATH_MFX=$PWD/tools/dep/linux64-gcc/lib/pkgconfig
            export FFSRC=$PWD/ffmpeg-${FF_VERSION}
            export USER_OPT="--enable-wolfssl"
            USE_TOOLCHAIN=clang-${LLVM_VER:-14} ./avbuild.sh
      - *upload

  build_rpi:
    docker:
      - image: buildpack-deps:bionic
    environment:
      COMPILER: clang
      TARGET_OS: "raspberry-pi"
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - *install-clang
      - *install-dev
      - *get-ffmpeg
      - run:
          name: Install sysroot
          command: |
            wget https://sourceforge.net/projects/avbuild/files/${TARGET_OS}/${TARGET_OS/r*pi/rpi}-sysroot.tar.xz/download -O sysroot.tar.xz
            tar Jxf sysroot.tar.xz
      - run:
          name: Configure and Build
          command: |
            if [ -n "${CONFIG_SUFFIX}" ]; then
              ln -sf config{${CONFIG_SUFFIX},}.sh;
            fi
            export SYSROOT=$PWD/sysroot
            export FFSRC=$PWD/ffmpeg-${FF_VERSION}
            USE_TOOLCHAIN=clang-${LLVM_VER:-14} ./avbuild.sh ${TARGET_OS}
      - *upload

  build_sunxi:
    docker:
      - image: buildpack-deps:bionic
    environment:
      COMPILER: clang
      TARGET_OS: "sunxi"
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - *install-clang
      - *install-dev
      - *get-ffmpeg
      - run:
          name: Install sysroot
          command: |
            wget https://sourceforge.net/projects/avbuild/files/${TARGET_OS}/${TARGET_OS/r*pi/rpi}-sysroot.tar.xz/download -O sysroot.tar.xz
            tar Jxf sysroot.tar.xz
      - run:
          name: Configure and Build
          command: |
            if [ -n "${CONFIG_SUFFIX}" ]; then
              ln -sf config{${CONFIG_SUFFIX},}.sh;
            fi
            export SYSROOT=$PWD/sysroot
            export FFSRC=$PWD/ffmpeg-${FF_VERSION}
            USE_TOOLCHAIN=clang-${LLVM_VER:-14} ./avbuild.sh ${TARGET_OS}
      - *upload

  build_win_static:
    docker:
      - image: buildpack-deps:bionic
    environment:
      COMPILER: clang # clang-10: compiler-rt symbols are used, e.g. ___ashldi3 (https://travis-ci.org/wang-bin/avbuild/jobs/497331833)
      TARGET_OS: windows-desktop
      LIB_OPT: --enable-static
      VCDIR: /tmp/msvcrt-dev
      WindowsSdkDir: /tmp/winsdk
      PKG_CONFIG_PATH_MFX: /tmp/dep/ClangCL/lib/pkgconfig
      AMF_DIR: /tmp/dep/include
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - *install-clang
      - *install-dev
      - *get-ffmpeg
      - *get-winsysroot
      - run:
          name: Configure and Build
          command: |
            echo WindowsSDKVersion: $WindowsSDKVersion
            export WindowsSDKVersion=$(cat $WindowsSdkDir/.version)
            if [ -n "${CONFIG_SUFFIX}" ]; then
              ln -sf config{${CONFIG_SUFFIX},}.sh;
            fi
            wget https://sourceforge.net/projects/avbuild/files/dep/dep.7z/download -O dep.7z
            7z x -y dep.7z -o/tmp &>/dev/null
            export FFSRC=$PWD/ffmpeg-${FF_VERSION}
            USE_TOOLCHAIN=clang-${LLVM_VER:-14} ./avbuild.sh ${TARGET_OS} "arm64-clang-cl-${LLVM_VER:-14} arm x86 x64"
      - *upload

  build_uwp_static:
    docker:
      - image: buildpack-deps:bionic
    environment:
      COMPILER: clang
      TARGET_OS: uwp
      LIB_OPT: --enable-static
      VCDIR: /tmp/msvcrt-dev
      WindowsSdkDir: /tmp/winsdk
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - *install-clang
      - *install-dev
      - *get-ffmpeg
      - *get-winsysroot
      - run:
          name: Configure and Build
          command: |
            echo WindowsSDKVersion: $WindowsSDKVersion
            export WindowsSDKVersion=$(cat $WindowsSdkDir/.version)
            if [ -n "${CONFIG_SUFFIX}" ]; then
              ln -sf config{${CONFIG_SUFFIX},}.sh;
            fi
            export FFSRC=$PWD/ffmpeg-${FF_VERSION}
            USE_TOOLCHAIN=clang-${LLVM_VER:-14} ./avbuild.sh ${TARGET_OS} "arm64-clang-cl-${LLVM_VER:-14} arm x86 x64"
      - *upload

  build_uwp:
    docker:
      - image: buildpack-deps:bionic
    environment:
      COMPILER: clang
      TARGET_OS: uwp
      VCDIR: /tmp/msvcrt-dev
      WindowsSdkDir: /tmp/winsdk
    steps:
      - checkout
      - run: git submodule update --init --recursive
      - *install-clang
      - *install-dev
      - *get-ffmpeg
      - *get-winsysroot
      - run:
          name: Configure and Build
          command: |
            echo WindowsSDKVersion: $WindowsSDKVersion
            export WindowsSDKVersion=$(cat $WindowsSdkDir/.version)
            if [ -n "${CONFIG_SUFFIX}" ]; then
              ln -sf config{${CONFIG_SUFFIX},}.sh;
            fi
            export FFSRC=$PWD/ffmpeg-${FF_VERSION}
            USE_TOOLCHAIN=clang-${LLVM_VER:-14} ./avbuild.sh ${TARGET_OS} "arm64-clang-cl-${LLVM_VER:-14} arm x86 x64"
      - *upload

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_gcc
